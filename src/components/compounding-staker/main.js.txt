import React, { Component } from 'react';
import { ethers } from 'ethers';
import _ from 'lodash';
import moment from 'moment';
import $ from 'jquery';
import Chart from '../../../node_modules/chart.js/dist/chart.js';
import BigNumber from 'bignumber.js';
import CompoundingStakerAbi from '../../abi/CompoundingStaker.json';
import FeiTribeUniV2PairAbi from '../../abi/UniswapV2Pair.json';
import FeiTokenAbi from '../../abi/Fei.json';
import TribeTokenAbi from '../../abi/Tribe.json';
import UniswapRouterV2Abi from '../../abi/UniswapRouterV2.json';
import StakingRewardsV2 from '../../abi/StakingRewardsV2.json';
import { getProvider, getSigner, getAccount } from '../wallet/wallet';
import feiImg from './img/fei-token-v1-32.png';
import tribeImg from './img/tribe-token-v1-32.png';
import feiTribeImg from './img/fei-tribe-lp-token-64-96.png';
import stakerShareImg from './img/stonks-smol.png';
import EventEmitter from '../../modules/event-emitter';
import Wallet from '../wallet/wallet';
import './main.css';

const tribeRewardsAddress = '0x18305DaAe09Ea2F4D51fAa33318be5978D251aBd';
const feiTokenAddress = '0x956F47F50A910163D8BF957Cf5846D573E7f87CA';
const tribeTokenAddress = '0xc7283b66Eb1EB5FB86327f08e1B5816b0720212B';
const compoundingStakerContractAddress = '0x490b9ccbeee72f960bd880386da2465b42e935d2';
const feiTribeUniV2PairAddress = '0x9928e4046d7c6513326cCeA028cD3e7a91c7590A';
const uniRouterV2Address = '0x7a250d5630b4cf539739df2c5dacb4c659f2488d';
var setProgressTimeout = null;

var TribeRewards = new ethers.Contract(
  tribeRewardsAddress,
  StakingRewardsV2,
  getProvider()
);
var Fei = new ethers.Contract(
  feiTokenAddress,
  FeiTokenAbi,
  getSigner()
);
var Tribe = new ethers.Contract(
  tribeTokenAddress,
  TribeTokenAbi,
  getSigner()
);
var CompoundingStaker = new ethers.Contract(
  compoundingStakerContractAddress,
  CompoundingStakerAbi,
  getSigner()
);
var FeiTribeUniV2Pair = new ethers.Contract(
  feiTribeUniV2PairAddress,
  FeiTribeUniV2PairAbi,
  getSigner()
);
var UniswapRouterV2 = new ethers.Contract(
  uniRouterV2Address,
  UniswapRouterV2Abi,
  getSigner()
);

const $getJSON = (url) => {
  return new Promise((resolve) => {
    $.getJSON(url, resolve);
  });
}

const etherscanProvidder = new ethers.providers.EtherscanProvider(null, 'Q1SN85UMI8HDCDREN123VZK2M6UCBMIMD4');

class c extends Component {
  constructor(props) {
    super(props);
  }

  async componentWillMount() {
    var component = this;
    console.log('hey');
    const history = await etherscanProvidder.getHistory(compoundingStakerContractAddress);
    const pastHarvests = history.filter((tx) => tx.data === '0x4641257d').map((tx) => {
      return {
        timestamp: tx.timestamp * 1000,
        hash: tx.hash
      };
    });
    console.log('pastHarvests', pastHarvests);

    var from = 1623196800; // 2021-06-09
    var to = Math.floor(Date.now() / 1e3);
    var url = `https://api.coingecko.com/api/v3/coins/tribe-2/market_chart/range?vs_currency=usd&from=${from}&to=${to}`;
    const tribeHistory = (await $getJSON(url)).prices;
    console.log('tribeHistory', tribeHistory);

    // Chart.js config
    const config = {
      type: 'line',
      data: {
        labels: [],
        datasets: [
          {
            label: 'CS',
            backgroundColor: 'rgb(34, 153, 110)',
            borderColor: 'rgb(34, 153, 110)',
            data: [],
            fill: false,
            cubicInterpolationMode: 'monotone',
            tension: 0.4,
            radius: 0
          }
        ]
      },
      options: {
        plugins: {
          legend: {
            display: false
          },
          title: {
            display: true,
            text: 'Estimated growth in $ terms since deployment, vs staking LP tokens alone & keeping TRIBE rewards'
          }
        },
        scales: {
          y: {
            ticks: {
              callback: function(value, index, values) {
                return (value > 0 ? '+' : '') + Math.round(100*value)/100 + '%';
              }
            }
          },
          x: {
            type: 'linear',
            ticks: {
              maxTicksLimit: 10,
              callback: function(value, index, values) {
                return moment(value).format('MMMM D');
              }
            }
          }
        }
      }
    };

    var apr = 0.85;
    var value = {
      vanilla: {
        tribe: 0,
        lp: 10000
      },
      cs: {
        tribe: 0,
        lp: 10000
      }
    };
    var harvestIndex = 0;
    var hist = [];
    var lastTimestamp = tribeHistory[0][0];
    var firstTribePrice = tribeHistory[0][1];
    tribeHistory.forEach((d, i) => {
      if (i === 0) return;
      var t = d[0];
      var elapsed = t - lastTimestamp;
      var elapsedYears = elapsed/(365*24*36e5);
      var tribePrice = d[1];

      // compute generic up to date variables
      // impermanent_loss = 2 * sqrt(price_ratio) / (1+price_ratio) â€” 1
      var priceRatio = tribePrice / firstTribePrice;
      var impermanentLoss = 2 * Math.sqrt(priceRatio) / (1+priceRatio) - 1;
      var lpValue = priceRatio + impermanentLoss;

      // update tribe rewards
      value.vanilla.tribe += value.vanilla.lp * lpValue * apr * elapsedYears / tribePrice;
      value.cs.tribe += value.cs.lp * lpValue * apr * elapsedYears / tribePrice;

      // harvests
      if (pastHarvests[harvestIndex] && t > pastHarvests[harvestIndex].timestamp) {
        console.log('harvest', new Date(t).toString());
        harvestIndex++;
        var newLpTokens = value.cs.tribe * 0.95 * tribePrice / lpValue;
        value.cs.tribe = 0;
        value.cs.lp += newLpTokens;
      }

      // current values
      var vanillaValue = value.lpValue * value.vanilla.lp + value.tribeValue * value.vanilla.tribe;
      var csValue = value.lpValue * value.cs.lp + value.tribeValue * value.cs.tribe;

      value.lpValue = lpValue;
      value.tribeValue = tribePrice;
      lastTimestamp = t;
      config.data.labels.push(t);
      config.data.datasets[0].data.push(Math.round(10000 * csValue / vanillaValue) / 100 - 100);
    });
    console.log('value', value);
    console.log('vanilla value', value.lpValue * value.vanilla.lp + value.tribeValue * value.vanilla.tribe);
    console.log('cs value', value.lpValue * value.cs.lp + value.tribeValue * value.cs.tribe);

    // draw chart
    var el = document.getElementById('chart-0');
    console.log('el', el);
    var myChart = new Chart(el, config);
  }

  render() {
    return (
      <div className="compounding-staker">
        <div className="disclaimer">
          This tool is reviewed by community members, but not audited. As always, <u>use at your own risk</u>.
        </div>
        <div className="strategy card section">
          <div className="apr">
          <div className="text">APR</div>
            <div className="num">112.7<br/>%</div>
          </div>
          <div className="cf">
            <div className="info">
              <h1>
                <img src={feiTribeImg}/> FEI-TRIBE LP tokens strategy V1
              </h1>
              <table>
                <tbody>
                  <tr>
                    <td>Your staked value :</td>
                    <td><strong>0</strong></td>
                    <td>FEI</td>
                  </tr>
                  <tr>
                    <td>Total staked value :</td>
                    <td><strong>177,855 FEI</strong></td>
                    <td>FEI</td>
                  </tr>
                  <tr>
                    <td>Unclaimed rewards :</td>
                    <td><strong>256,7</strong></td>
                    <td>TRIBE</td>
                  </tr>
                  <tr>
                    <td>Last harvest :</td>
                    <td><strong>35h ago</strong></td>
                    <td><a href="" target="_blank">tx</a></td>
                  </tr>
                  <tr>
                    <td>Fees :</td>
                    <td colSpan="2">5-6% of TRIBE rewards</td>
                  </tr>
                </tbody>
              </table>
            </div>
            <div className="form">
              <nav className="menu">
                <a className="active">Deposit</a>
                <a>Withdraw</a>
              </nav>
              <div>
                <p>Please note: the old StakingRewardsV2 system is deprecated, and no rewards are distributed anymore.</p>
              </div>
            </div>
          </div>
          <div className="details">
            <strong>About this strategy :</strong> if you provide <img src={feiImg}/> FEI or <img src={tribeImg}/> TRIBE, half of them will be swapped to the other, in order to get <img src={feiTribeImg}/> FEI-TRIBE LP Tokens. You will be subject to <a href="https://uniswap.org/docs/v2/advanced-topics/understanding-returns/" target="_blank">impermanent loss</a>, make sure to understand what it means. The <img src={feiTribeImg}/> FEI-TRIBE LP Tokens are staked on <a href="https://app.fei.money/stake" target="_blank">the official FeiRewards contract</a>, to earn <img src={tribeImg}/> TRIBE rewards. Regularly, <img src={tribeImg}/> TRIBE rewards are harvested, and half of them are converted to <img src={feiImg}/> FEI to get more <img src={feiTribeImg}/> FEI-TRIBE LP Tokens. Rewards are compounding : these farmed <img src={feiTribeImg}/> FEI-TRIBE LP Tokens will themselves earn <img src={tribeImg}/> TRIBE rewards. When you withdraw, you will get back more <img src={feiTribeImg}/> FEI-TRIBE LP Tokens than what you put in, and you can also choose to withdraw fully in <img src={feiImg}/> FEI or <img src={tribeImg}/> TRIBE, swapping will be done automatically.
            <div className="chart">
              <canvas id="chart-0" width="600" height="200"></canvas>
            </div>
          </div>
        </div>
        <br/>
        <a className="old-interface" href="#/CompoundingStakerOld">use the old interface</a>
      </div>
    );
  }
}

export default c;
